// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  window.Dropwizard = {};

  Dropwizard.Dashboard = (function() {

    Dashboard.name = 'Dashboard';

    function Dashboard() {
      this.appendTemplateTo = __bind(this.appendTemplateTo, this);

      this.installRemoteTemplate = __bind(this.installRemoteTemplate, this);
      this.bindings = {
        proxyHeartbean: ko.observable(),
        googleChartsLoaded: ko.observable(false),
        connectionToProxyEstablished: ko.observable(false),
        connectionToProxyLost: ko.observable(false),
        connectionError: ko.observable(),
        beforeSocketConnect: ko.observable(),
        pageComponents: ko.observableArray(),
        metrics: ko.observable()
      };
      this.messageCounter = 0;
    }

    Dashboard.prototype.applyBindings = function() {
      return ko.applyBindings(this.bindings);
    };

    Dashboard.prototype.onMetrics = function(updatedMetrics) {
      return this.bindings.metrics(updatedMetrics);
    };

    Dashboard.prototype.addPageComponent = function(component) {
      var binding, name, _ref;
      _ref = component.bindings;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        binding = _ref[name];
        this.bindings[name] = binding;
      }
      if (component.hasOwnProperty("pageComponent")) {
        this.bindings.pageComponents.push(component.pageComponent);
      }
      if (component.hasOwnProperty("onMetrics")) {
        this.bindings.metrics.subscribe(component.onMetrics);
      }
      if (component.hasOwnProperty("beforeSocketConnect")) {
        return this.bindings.beforeSocketConnect.subscribe(component.beforeSocketConnect);
      }
    };

    Dashboard.prototype.installRemoteTemplate = function(id, url) {
      var _this = this;
      return jQuery.ajax({
        url: url,
        async: false,
        success: function(template) {
          return jQuery("body").append("<script id=\"" + id + "\" type=\"text/html\">" + template + "</script>");
        },
        error: function() {
          return alert("Failed to install template " + id);
        }
      });
    };

    Dashboard.prototype.appendTemplateTo = function(templateId, node) {
      var element;
      jQuery("<div id=\"" + templateId + "-node\" data-bind=\"template: { name: '" + templateId + "' }\"></div>").appendTo(node);
      element = document.getElementById(templateId + "-node");
      return ko.applyBindingsToNode(element, null, Dropwizard.mainDashboard.bindings);
    };

    Dashboard.prototype.connectToProxy = function() {
      var socket,
        _this = this;
      if (window.WebSocket) {
        this.bindings.beforeSocketConnect(true);
        socket = new WebSocket("ws://localhost:9000");
        socket.onmessage = function(event) {
          var json;
          _this.bindings.proxyHeartbean(++_this.messageCounter);
          json = JSON.parse(event.data);
          if (json.namespace === "metrics") {
            return _this.onMetrics(json.payload);
          }
        };
        socket.onerror = function(event) {
          return _this.bindings.connectionError(event);
        };
        socket.onopen = function(event) {
          return _this.bindings.connectionToProxyEstablished(true);
        };
        return socket.onclose = function(event) {
          return _this.bindings.connectionToProxyLost(true);
        };
      } else {
        return alert("No websocket support! Use a recent version of Chrome or Firefox");
      }
    };

    return Dashboard;

  })();

  Dropwizard.mainDashboard = new Dropwizard.Dashboard;

}).call(this);
